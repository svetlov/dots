export LC=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export EDITOR='vim'

export HOME=$(cd ${HOME}; pwd -P);
export _LOCAL=${HOME}/.local

setopt aliases

_str_contains() {
	# check $2 is a substring of $1
	[[ $1 == *$2* ]] && return 1 || return 0;
}

_smart_append() {
    # join $2 to $1 with ':' if $1 exists, else return $2
    # echo "$# $@" 1>&2;
    if [[ "$#" -eq 2 ]]; then
        _str_contains $1 $2;
        if [[ $? -eq 1 ]] ; then
            echo "$1";  # $2 is a substring of $1
        else
            echo "$2:$1";
        fi
    elif [[ "$#" -eq 1 ]]; then
        echo "$1";
    else
        echo "Illegal number of paramters in _smart_append function" 1>&2;
    fi
}

_NEWPATH="/usr/local/bin"
_NEWPATH="/usr/local/opt/coreutils/libexec/gnubin:${_NEWPATH}"
_NEWPATH="/usr/local/cuda/bin:${_NEWPATH}"
_NEWPATH="${_LOCAL}/usr/bin:${_LOCAL}/bin:/usr/texbin:${_NEWPATH}"
export PATH=$(_smart_append ${PATH} ${_NEWPATH})

_NEW_CPATH="/usr/local/cuda/include"
_NEW_CPATH="${_LOCAL}/usr/lib/gcc/4.9/gcc/x86_64-unknown-linux-gnu/4.9.3/include:${_NEW_CPATH}"
_NEW_CPATH="${_LOCAL}/usr/include/c++/4.9.3/x86_64-unknown-linux-gnu:${_NEW_CPATH}"
_NEW_CPATH="${_LOCAL}/usr/include/c++/4.9.3:${_NEW_CPATH}"
_NEW_CPATH="${_LOCAL}/usr/include:${_LOCAL}/include:${_NEW_CPATH}"
export CPATH=$(_smart_append ${CPATH} ${_NEW_CPATH})

_NEW_LIBRARY_PATH="/usr/local/cuda/lib64"
_NEW_LIBRARY_PATH="${_LOCAL}/usr/lib/gcc/lib64:${_NEW_LIBRARY_PATH}"
_NEW_LIBRARY_PATH="${_LOCAL}/usr/lib:${_LOCAL}/lib:${_LOCAL}/usr/lib/x86_64-linux-gnu:${_NEW_LIBRARY_PATH}"
export LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} ${_NEW_LIBRARY_PATH})

_NEW_LD_LIBRARY_PATH="/usr/local/cuda/lib64"
_NEW_LD_LIBRARY_PATH="${_LOCAL}/usr/lib/gcc/lib64:${_NEW_LD_LIBRARY_PATH}"
_NEW_LD_LIBRARY_PATH="${_LOCAL}/usr/lib:${_LOCAL}/lib:${_LOCAL}/usr/lib/x86_64-linux-gnu:${_NEW_LD_LIBRARY_PATH}"
export LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} ${_NEW_LD_LIBRARY_PATH})

export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$PROJECTS

which virtualenvwrapper.sh > /dev/null
if [[ $? -ne 0 ]]; then
    pip install --user virtualenvwrapper
fi

alias zshconfig="vim ~/.zshrc"
alias editor="vim"
alias vimlarge="vim -u NONE -U NONE -N"
alias vimconfig="vim ~/.vimrc"
alias ohmyzsh="vim ~/.oh-my-zsh"
alias cx="chmod +x "
alias rm="rm -i"
alias mv="mv -i"
alias wgetn="wget --no-check-certificate";

svnvimdiff () {
    vimdiff ${6} ${7}
}

if [ -e "${HOME}/.local/usr/bin/g++-4.9" ]; then
    export CXX=${HOME}/.local/usr/bin/g++-4.9
fi

if [ -e "${HOME}/.local/usr/bin/gcc-4.9" ]; then
    export CC=${HOME}/.local/usr/bin/gcc-4.9
fi

if [ -e "${HOME}/projects/arcadia.svn/devtools/ya/ya" ]; then
    export ARCADIA_ROOT="${HOME}/projects/arcadia.svn"
elif [ -e "${HOME}/projects/yandex/arcadia/devtools/ya/ya" ]; then
    export ARCADIA_ROOT="${HOME}/projects/yandex/arcadia"
fi

if [ -n "${ARCADIA_ROOT}" ]; then
    ya () { (unset CC; unset CXX; unset CPATH; ${ARCADIA_ROOT}/devtools/ya/ya "$@";) }
    arcadia_root_call() {
        # $1 -- original cmd
        # $2 -- arcadia cmd
        if [[ $(pwd -P) == ${ARCADIA_ROOT}* ]]; then
            array=( ${(s. .)"${2}"} )
        else
            array=( ${(s. .)"${1}"} )
        fi
        ${array[@]} ${@:3};
    }

    alias gdb='arcadia_root_call gdb "ya tool gdb"';
    arcadiavim () { ( unset CC; unset CXX; unset CPATH; vim "$@";) };
    alias vim='arcadia_root_call vim arcadiavim';

    alias svn='ya tool svn'
    svnst() { ya tool svn status "${@}" | grep '^[ADM]' }
    svncdiff() { ya tool svn diff "${@}" | colordiff }
    svnvimdiff() { ya tool svn diff --diff-cmd=${HOME}/projects/dots/all/vim/svnvimdiffcmd.sh }
    svnunstage() { ya tool svn rm --keep-local "${@}" }

    alias mapreduce="${ARCADIA_ROOT}/quality/mapreduce/mapreduce"


    ## Binaries build with latest GCC require latest libstdc++:
    yaldpath="$(ya tool c++ --print-toolchain-path)/gcc/lib"
    export LD_LIBRARY_PATH="${yaldpath}:${LD_LIBRARY_PATH}"
    # for danet
    export OMP_NUM_THREADS=8
    export MKL_NUM_THREADS=8

    alias yaycm='ya make -r --add-result='.h' --add-result='.hh' \
        --add-result='.hpp' --add-result='.c' --add-result='.cc' \
        --add-result='.cpp' --output ${ARCADIA_ROOT}/.ycm \
        --no-src-links --keep-going'
fi

if [ -e "${HOME}/.yt/token" ]; then
    export YT_PROXY=banach.yt.yandex.net
    export YT_TOKEN=`cat ~/.yt/token`
    export YT_HOME=//home/cvtest/splinter
fi
