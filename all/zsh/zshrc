export LC=en_US.UTF-8;
export LC_CTYPE=en_US.UTF-8;
export LC_ALL=en_US.UTF-8;
export LANG=en_US.UTF-8;
export EDITOR='vim';
export HOME=$(cd ${HOME}; pwd -P);
export LOCAL=${HOME}/.local;
export WORKON_HOME=${HOME}/.virtualenvs;
export PROJECT_HOME=${HOME}/projects;
export IPYTHON_PORT=6500;
export CLANG39_CC="/usr/bin/clang-3.9";
export CLANG39_CXX="/usr/bin/clang++-3.9";

export LUA_VERSION="5.3";
export TMUX_VERSION="2.5";

[[ `uname` == "Linux" ]] && is_linux=true || is_linux=false;
[[ `uname` == "Darwin" ]] && is_darwin=true || is_darwin=false;

# Regular Colors
export COLOR_OFF=$'\e[0m'             # Text Reset
export COLOR_BLACK=$'\e[0;30m'        # Black
export COLOR_RED=$'\e[0;31m'          # Red
export COLOR_GREEN=$'\e[0;32m'        # Green
export COLOR_YELLOW=$'\e[0;33m'       # Yellow
export COLOR_BLUE=$'\e[0;34m'         # Blue
export COLOR_PURPLE=$'\e[0;35m'       # Purple
export COLOR_CYAN=$'\e[0;36m'         # Cyan
export COLOR_WHITE=$'\e[0;37m'        # White


which nvim > /dev/null;
if [[ $? -eq 0 ]]; then
    alias vim="nvim";
fi

alias zshconfig="vim ~/.zshrc"
alias editor="vim"
alias vimlarge="vim -u NONE -U NONE -N"
alias vimconfig="vim ~/.config/nvim/init.vim"
alias ohmyzsh="vim ~/.oh-my-zsh"
alias cx="chmod +x "
alias rm="rm -i"
alias mv="mv -i"
alias wgetn="wget --no-check-certificate";

alias tensorboard="CUDA_VISIBLE_DEVICES= tensorboard";


reset-ssh() {
    sudo netstat -apn | grep -w 2224 | awk '{ print $7 }' | sed 's/\(.*\)\/.*/\1/' | sort -u | xargs -I{} kill -9 {};
}

_pathstr_contains() {
	# check $2 is a subpart of pathes of $1
    splitted=$( echo $1 | tr ":" "\n" );
    echo ${splitted[@]} | grep -q -w -E "^$2$" > /dev/null;
    [[ $? -eq 0 ]] && return 1 || return 0;
}

_smart_append() {
    # join $2 to $1 with ':' if $1 exists, else return $2
    if [[ "$#" -eq 2 ]]; then
        _pathstr_contains $1 $2;
        if [[ $? -eq 0  && -d $2 ]] ; then
            echo "$2:$1";  # $2 is not substring of $1 and exists
        else
            echo "$1";
        fi
    elif [[ "$#" -eq 1 ]]; then
        echo "$1";
    else
        echo "Illegal number of paramters in _smart_append function" 1>&2;
    fi
}

# =====================================================================================================================
# =============================================== Env Creator Settings ================================================
# =====================================================================================================================

_to_clean_env() {
    echo "${COLOR_RED}don't forget call 'tmux detach'${COLOR_OFF}";
    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";
    CPATH="/usr/local/include";
    LIBRARY_PATH="/usr/local/lib";
    LD_LIBRARY_PATH="/usr/local/lib";

    export PATH; export CPATH; export LIBRARY_PATH; export LD_LIBRARY_PATH;
}

_update_env() {
    PATH=$(_smart_append ${PATH} "/usr/local/bin");
    PATH=$(_smart_append ${PATH} "/usr/local/opt/coreutils/libexec/gnubin");
    PATH=$(_smart_append ${PATH} "/usr/texbin");

    PATH=$(_smart_append ${PATH} "${HOME}/.local/bin");  # for virtualenvwrapper and pbcopy/pbpaste
    PATH=$(_smart_append ${PATH} "${HOME}/.local/cmake/bin");
    PATH=$(_smart_append ${PATH} "${HOME}/.local/tmux/bin");
    PATH=$(_smart_append ${PATH} "${HOME}/.local/nvim/bin");

    CPATH=$(_smart_append ${CPATH} "/usr/local/include");

    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "/usr/local/lib");
    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${HOME}/.local/lib");

    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${HOME}/.local/lib");

    if [[ -d "/usr/local/cuda" ]]; then
        export CUDA_HOME="/usr/local/cuda";
        PATH=$(_smart_append ${PATH} "${CUDA_HOME}/bin");
        CPATH=$(_smart_append ${CPATH} "${CUDA_HOME}/include");
        LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${CUDA_HOME}/lib64");
        LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${CUDA_HOME}/lib64");  # libcudart
        # LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${CUDA_HOME}/lib64/stubs");  # libcuda
        LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${CUDA_HOME}/extras/CUPTI/lib64");  # libcupti
    fi

    if [[ -d "/opt/openmpi-3.0.0" ]]; then
        export MPI_PATH="/opt/openmpi-3.0.0";
        export CPLUS_INCLUDE_PATH="${MPI_PATH}/include";
        PATH=$(_smart_append ${PATH} "${MPI_PATH}/bin");
        CPATH=$(_smart_append ${CPATH} "${MPI_PATH}/include");
        LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${MPI_PATH}/lib");
        LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${MPI_PATH}/lib");
    fi

    export PATH; export CPATH; export LIBRARY_PATH; export LD_LIBRARY_PATH; export MANPATH; export INFOPATH;
}

_update_env;

TF="${HOME}/projects/tensorflow";
if [[ $is_linux == true && ! -z "${TF+x}" ]]; then
    export TF;
    tf () { cd "${TF}"; };
fi

# =====================================================================================================================
# ================================================= OhMyZsh Settings ==================================================
# =====================================================================================================================

export ZSH=$HOME/.oh-my-zsh

if [[ ! -f ${ZSH}/oh-my-zsh.sh ]]; then
    git clone git://github.com/robbyrussell/oh-my-zsh.git ${ZSH};

    git clone https://github.com/junegunn/fzf.git ${ZSH}/custom/plugins/fzf;
    ${ZSH}/custom/plugins/fzf/install --bin;
    git clone https://github.com/Treri/fzf-zsh.git ${ZSH}/custom/plugins/fzf-zsh;

    compaudit | xargs chmod g-w,o-w
fi

if [[ -f "${HOME}/.oh-my-zsh/custom/themes/mytheme.zsh-theme" ]]; then
    ZSH_THEME="mytheme";
else
    ZSH_THEME="maran";
fi


ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
HIST_STAMPS="yyyy-mm-dd"

plugins=(git mercurial tmux python osx brew history-substring-search virtualenvwrapper vi-mode fzf-zsh)

source $ZSH/oh-my-zsh.sh

# =====================================================================================================================
# ================================================= Arcadia Settings ==================================================
# =====================================================================================================================

yaclone() {
    svn cat svn+ssh://arcadia.yandex.ru/arc/trunk/arcadia/ya > ${HOME}/.yatool;
    [[ ! -z ${1} ]] && local root=${1} || local root="${HOME}/projects/arcadia.git";
    python ${HOME}/.yatool clone ${root};
    rm -rf ~/.yatool;
    _update_arcadia_env;

    (
        cd ${root};
        yamake --checkout cv/imgclassifiers/danet -j0;
        yamake --checkout ml/tensorflow/ytensorflow -j0;

        git init;
        git add --all :/;
        git commit -m "initial commit";

        yaycm cv/imgclassifiers/danet ml/tensorflow/ytensorflow/cpp;
        python junk/splinter/vim/ycm_to_color_coded.py > .color_coded;
    )
}

_update_arcadia_env () {
    if [ -e "${HOME}/projects/arcadia.git/ya" ]; then
        export ARCADIA_ROOT="${HOME}/projects/arcadia.git";
        export ARCADIA_ROOT_BIN="${ARCADIA_ROOT}/bin";
        arc () { cd ${ARCADIA_ROOT}; };
        export DANET="${ARCADIA_ROOT}/cv/imgclassifiers/danet";
        export DANET_BIN="${ARCADIA_ROOT_BIN}/cv/imgclassifiers/danet";
        danet () { cd ${DANET}; };
        export YTF="${ARCADIA_ROOT}/ml/tensorflow/ytensorflow";
        export YTF_BIN="${ARCADIA_ROOT_BIN}/ml/tensorflow/ytensorflow";
        ytf () { cd ${YTF}; };
        export JUNK="${ARCADIA_ROOT}/junk/splinter";
        export JUNK_BIN="${ARCADIA_ROOT_BIN}/junk/splinter";
        junk () { cd ${JUNK}; };
    fi

    if [[ ! -z "${ARCADIA_ROOT+x}" ]]; then
        arcadia_root_call() {
            # $1 -- original cmd
            # $2 -- arcadia cmd
            if [[ $(pwd -P) == ${ARCADIA_ROOT}* ]]; then
                array=( ${(s. .)"${2}"} )
            else
                array=( ${(s. .)"${1}"} )
            fi
            ${array[@]} ${@:3};
        }

        git-svn-update-arcadia-master () {
            if [[ $(pwd -P) != ${ARCADIA_ROOT}* ]]; then
                echo "${COLOR_RED}Error${COLOR_OFF}: Please cd to ${ARCADIA_ROOT} directory." 1>&2;
                return 1;
            fi

            if [[ $(git status --porcelain | wc -l) -ne 0 ]]; then
                echo "${COLOR_RED}Error${COLOR_OFF}: Please commit all local changes before update." 1>&2;
                return 1;
            fi

            local branch=`git branch | grep -e "^*" | cut -f2 -d\ `;
            if [[ ${branch} != "master" ]]; then
                echo "${COLOR_RED}Error${COLOR_OFF}: Please switch to master branch manually before update." 1>&2;
                return 1;
            fi

            (cd ${ARCADIA_ROOT}; svn update;)
            git add --all :/;
            git commit -m "update from svn update call";
        }

        ya () { (unset CC; unset CXX; unset CPATH; ${ARCADIA_ROOT}/ya "$@";) }
        yamake () { ya make -o $ARCADIA_ROOT/bin --no-src-links "$@"; }
        alias gdb='arcadia_root_call gdb "ya tool gdb"';
        alias svn='arcadia_root_call svn "ya tool svn"';
        alias hg='arcadia_root_call hg "ya tool hg"';

        yaycm () {
            ya make -rj32 --add-result='.h' --add-result='.hh' \
                --add-result='.hpp' --add-result='.c' --add-result='.cc' \
                --add-result='.cpp' --output ${ARCADIA_ROOT}/.ycm \
                --no-src-links --keep-going --checkout $@;
        }
    fi

    if [ -e "${HOME}/.yt/token" ]; then
        export YT_PROXY=hahn.yt.yandex.net
        export YT_TOKEN=`cat ~/.yt/token`
        export YT_HOME=//home/cvtest/splinter
    fi
}

_update_arcadia_env;

# =====================================================================================================================
# =============================================== OS Specific Settings ================================================
# =====================================================================================================================
if [[ $is_darwin == true ]]; then

elif [[ $is_linux == true ]]; then
    if [[ -L "${HOME}/.zshrc" ]]; then
        if [[ "${#TMUX}" -eq 0 ]]; then
            if [[ -n "$SSH_AUTH_SOCK" && "`readlink ~/.ssh/ssh_auth_sock`" != "$SSH_AUTH_SOCK" ]]; then
                ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
            fi
            tmux attach || tmux new -A
        fi
    fi
else
    echo "${COLOR_RED}Unknown host $(uname -s)${COLOR_OFF}";
fi

# =====================================================================================================================
# ================================================= Deploy Function ===================================================
# =====================================================================================================================

_install_gcc49() {
    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    sudo apt-get update
    sudo apt-get install -y gcc-4.9 g++-4.9
}

_install_clang39() {
    wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
    sudo apt-get install -y clang-3.9 libclang-3.9-dev lldb-3.9 clang-format-3.9 python-clang-3.9
}

_install_cmake() {
    sudo apt-get install -y libcurl4-openssl-dev;

    mkdir -p ${HOME}/.tmp.build.packages;
    (
        cd ${HOME}/.tmp.build.packages;
        wget http://www.cmake.org/files/v3.10/cmake-3.10.1.tar.gz
        tar -xvzf cmake-3.10.1.tar.gz
        cd cmake-3.10.1/
        ./bootstrap --prefix=${LOCAL}/cmake --system-curl
        make -j
        make install
    )
    rm -rf ${HOME}/.tmp.builld.packages;
    _update_env;
}

_install_tmux() {
    which tmux > /dev/null;
    if [[ $? -eq 0 ]]; then
        local tmux_version=$(tmux -V | sed 's/tmux //g');
        if [[ ${tmux_version} -eq ${TMUX_VERSION} ]]; then
            return;
        fi
        rm -rf ${LOCAL}/tmux;
    fi

    sudo apt install -y automake
    sudo apt install -y build-essential
    sudo apt install -y pkg-config
    sudo apt install -y libevent-dev
    sudo apt install -y libncurses5-dev

    mkdir -p ${HOME}/.tmp.build.packages;
    (
        cd ${HOME}/.tmp.build.packages;
        git clone https://github.com/tmux/tmux
        cd tmux
        git checkout ${TMUX_VERSION}
        ./autogen.sh
        ./configure --prefix=${LOCAL}/tmux
        make -j
        make install
    )
    rm -rf ${HOME}/.tmp.build.packages

    _update_env;
}

_install_nvim() {
    mkdir -p ${HOME}/.tmp.build.packages;
    export TMPDIR="${HOME}/.tmp.build.packages";
    (
        cd $HOME/.tmp.build.packages;
        git clone https://github.com/neovim/neovim.git;
        cd neovim;
        git checkout v0.3.1;
        make CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$HOME/.local/nvim" -j;
        make install;
    );
    unset TMPDIR;
    rm -rf ${HOME}/.tmp.build.packages

    pip2 install --user --upgrade neovim
    pip3 install --user --upgrade neovim

    _update_env;
}

_reinstall_dots() {
    mkdir -p ${HOME}/projects;
    (
        cd ${HOME}/projects
        if [[ ! -d "${HOME}/projects/dots" ]]; then
            git clone git@github.com:svetlov/dots.git;
            cd dots
        else
            cd dots;
            git stash;
            git checkout master;
            git pull origin master;
        fi
        ./install.py install configs; _update_env;
    );
}

deploy_env() {
    sudo apt-get install -y make git cmake;
    sudo apt-get install -y python-pip python-setuptools python3-pip python3-setuptools;
    sudo apt-get install -y software-properties-common python-software-properties;
    _install_gcc49;
    _install_clang39;

    export CC=${CLANG39_CC}; export CXX=${CLANG39_CXX};
    _install_cmake;
    _install_tmux;
    _install_nvim;
    unset CC; unset CXX;

    pip2 install -U --user pip setuptools;
    pip2 install -U --user matplotlib;
    pip2 install -U --user pillow;
    pip2 install -U --user 'ipython[all]';
    pip2 install -U --user 'jupyter[all]';
    pip2 install -U --user virtualenvwrapper;

    _reinstall_dots;
}
