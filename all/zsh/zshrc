export LC=en_US.UTF-8;
export LC_CTYPE=en_US.UTF-8;
export LC_ALL=en_US.UTF-8;
export LANG=en_US.UTF-8;
export EDITOR='vim';

export USER="splinter";
export HOME=$(cd ${HOME}; pwd -P);
export LOCAL=${HOME}/.local;

export WORKON_HOME=${HOME}/.virtualenvs;
export PROJECT_HOME=${HOME}/projects;
export DOTS_HOME=${PROJECT_HOME}/dots;

export IPYTHON_PORT=6500;
export CLANG39_CC="/usr/bin/clang-3.9";
export CLANG39_CXX="/usr/bin/clang++-3.9";
export ARCADIA_ROOT="${HOME}/projects/arcadia/arcadia"
export ARCADIA_ROOT_GENERATED="${HOME}/projects/arcadia/generated"

export LUA_VERSION="5.3";
export TMUX_VERSION="2.5";

[[ `uname` == "Linux" ]] && is_linux=true || is_linux=false;
[[ `uname` == "Darwin" ]] && is_darwin=true || is_darwin=false;

# Regular Colors
export COLOR_OFF=$'\e[0m'             # Text Reset
export COLOR_BLACK=$'\e[0;30m'        # Black
export COLOR_RED=$'\e[0;31m'          # Red
export COLOR_GREEN=$'\e[0;32m'        # Green
export COLOR_YELLOW=$'\e[0;33m'       # Yellow
export COLOR_BLUE=$'\e[0;34m'         # Blue
export COLOR_PURPLE=$'\e[0;35m'       # Purple
export COLOR_CYAN=$'\e[0;36m'         # Cyan
export COLOR_WHITE=$'\e[0;37m'        # White


which nvim > /dev/null;
if [[ $? -eq 0 ]]; then
    alias vim="nvim";
    export EDITOR='nvim';
fi

alias zshconfig="vim ~/.zshrc"
alias editor="vim"
alias vimlarge="vim -u NONE -U NONE -N"
alias vimconfig="vim ~/.config/nvim/init.vim"
alias ohmyzsh="vim ~/.oh-my-zsh"
alias cx="chmod +x "
alias rm="rm -i"
alias mv="mv -i"
alias wgetn="wget --no-check-certificate";
alias curln="curl -H \"Authorization: OAuth $(cat ${HOME}/.nirvana/token)\"";
alias ipython='ipython --TerminalInteractiveShell.editing_mode=vi'

alias tensorboard="CUDA_VISIBLE_DEVICES= tensorboard";


reset-ssh() {
    sudo netstat -apn | grep -w 2224 | awk '{ print $7 }' | sed 's/\(.*\)\/.*/\1/' | sort -u | xargs -I{} kill -9 {};
}

_pathstr_contains() {
    # check $2 is a subpart of pathes of $1
    splitted=$( echo $1 | tr ":" "\n" );
    echo ${splitted[@]} | grep -q -w -E "^$2$" > /dev/null;
    [[ $? -eq 0 ]] && return 1 || return 0;
}

_safe_symlink() {
    if [[ -f "$2" ]]; then  # destination exists
        if [[ -L "$2" ]]; then   # destination is symlink
            local realDstPath=$(readlink -f "$2");
            if [[ "${realDstPath}" == "$1" ]]; then  # destination is linked to source
                echo "Destination file '$2' already exists and points to source '$1'" 1>&2;
                return;
            elif [[ ! -f "${realDstPath}" ]]; then  # destination is broken symlink
                rm "$2";
            else  # desitnation is link
                if [[ -f "${2}.back" ]]; then  # back file exits, failing
                    echo "Destination file '$2' already exists, and .back file also already exists" 1>&2;
                    return;
                fi
                echo "Making backup for existing destination file '$2'" 1>&2;
                ln -s ${realDstPath} "$2.back"
            fi
        elif [[ "${realDstPath}" == "$2" ]]; then  # destination exists and it's regular file
            if [[ -f "${2}.back" ]]; then  # back file exits, failing
                echo "Destination file '$2' already exists, and .back file also already exists" 1>&2;
                return;
            fi
            echo "Making backup for existing destination file '$2'">&2;
            cp $2 "$2.back"
        fi
    fi

    echo "Linking source $1 to destination $2" 1>&2;
    ln -s $1 $2;
}

_smart_append() {
    # join $2 to $1 with ':' if $1 exists, else return $2
    if [[ "$#" -eq 2 ]]; then
        _pathstr_contains $1 $2;
        if [[ $? -eq 0  && -d $2 ]] ; then
            echo "$2:$1";  # $2 is not substring of $1 and exists
        else
            echo "$1";
        fi
    elif [[ "$#" -eq 1 ]]; then
        echo "$1";
    else
        echo "Illegal number of paramters in _smart_append function" 1>&2;
    fi
}

# =====================================================================================================================
# =============================================== Env Creator Settings ================================================
# =====================================================================================================================

_to_clean_env() {
    echo "${COLOR_RED}don't forget call 'tmux detach'${COLOR_OFF}";
    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";
    CPATH="/usr/local/include";
    LIBRARY_PATH="/usr/local/lib";
    LD_LIBRARY_PATH="/usr/local/lib";

    export PATH; export CPATH; export LIBRARY_PATH; export LD_LIBRARY_PATH;
}

_update_env() {
    PATH=$(_smart_append ${PATH} "/usr/local/bin");
    PATH=$(_smart_append ${PATH} "/usr/local/opt/coreutils/libexec/gnubin");
    PATH=$(_smart_append ${PATH} "/usr/texbin");

    PATH=$(_smart_append ${PATH} "${LOCAL}/bin");  # for virtualenvwrapper and pbcopy/pbpaste
    PATH=$(_smart_append ${PATH} "${LOCAL}/cmake/bin");
    PATH=$(_smart_append ${PATH} "${LOCAL}/tmux/bin");
    PATH=$(_smart_append ${PATH} "${LOCAL}/nvim/bin");

    CPATH=$(_smart_append ${CPATH} "/usr/local/include");

    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "/usr/local/lib");
    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${LOCAL}/lib");

    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "/usr/local/lib");
    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${LOCAL}/lib");

    if [[ -d "/usr/local/cuda" ]]; then
        export CUDA_HOME="/usr/local/cuda";
        PATH=$(_smart_append ${PATH} "${CUDA_HOME}/bin");
        CPATH=$(_smart_append ${CPATH} "${CUDA_HOME}/include");
        LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${CUDA_HOME}/lib64");
        LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${CUDA_HOME}/lib64");  # libcudart
        # LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${CUDA_HOME}/lib64/stubs");  # libcuda
        LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${CUDA_HOME}/extras/CUPTI/lib64");  # libcupti
    fi

    if [[ -d "/opt/openmpi" ]]; then
        export MPI_PATH="/opt/openmpi";
        export CPLUS_INCLUDE_PATH="${MPI_PATH}/include";
        PATH=$(_smart_append ${PATH} "${MPI_PATH}/bin");
        CPATH=$(_smart_append ${CPATH} "${MPI_PATH}/include");
        LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${MPI_PATH}/lib");
        LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${MPI_PATH}/lib");
    fi

    export PATH; export CPATH; export LIBRARY_PATH; export LD_LIBRARY_PATH; export MANPATH; export INFOPATH;
}

_update_env;

# =====================================================================================================================
# ================================================= OhMyZsh Settings ==================================================
# =====================================================================================================================

export ZSH=$HOME/.oh-my-zsh

if [[ ! -f ${ZSH}/oh-my-zsh.sh ]]; then
    git clone git://github.com/robbyrussell/oh-my-zsh.git ${ZSH};

    git clone https://github.com/junegunn/fzf.git ${ZSH}/custom/plugins/fzf;
    ${ZSH}/custom/plugins/fzf/install --bin;
    git clone https://github.com/Treri/fzf-zsh.git ${ZSH}/custom/plugins/fzf-zsh;
    _update_env;
    compaudit | xargs chmod g-w,o-w

    _safe_symlink "${DOTS_HOME}/all/zsh/bashrc" "${HOME}/.bashrc"
    _safe_symlink "${DOTS_HOME}/all/zsh/zshrc" "${HOME}/.zshrc"
    _safe_symlink "${DOTS_HOME}/all/zsh/mytheme.zsh-theme" "${HOME}/.oh-my-zsh/custom/themes/mytheme.zsh-theme"
fi
export FZF_DEFAULT_COMMAND="fd --type file"

if [[ -f "${HOME}/.oh-my-zsh/custom/themes/mytheme.zsh-theme" ]]; then
    ZSH_THEME="mytheme";
else
    ZSH_THEME="maran";
fi


ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
HIST_STAMPS="yyyy-mm-dd"

plugins=(git tmux python osx brew history-substring-search virtualenvwrapper vi-mode fzf-zsh)

source ${ZSH}/oh-my-zsh.sh

# =====================================================================================================================
# ================================================= Arcadia Settings ==================================================
# =====================================================================================================================

ya-deploy() {
    sudo apt-get install yandex-arc-launcher -y --force-yes

    mkdir -p ${ARCADIA_ROOT}/arcadia ${ARCADIA_ROOT}/store ${ARCADIA_ROOT_GENERATED};
    nice arc mount -m ${ARCADIA_ROOT}/ -S ${ARCADIA_ROOT}/../store/;

    _update_arcadia_env;
}


_update_arcadia_env () {
    if [[ ! -z "${ARCADIA_ROOT+x}" ]]; then
        export FZF_DEFAULT_COMMAND="${DOTS_HOME}/all/vim/cat-arcadia-files.sh"

        export ARCADIA_ROOT="${HOME}/projects/arcadia/arcadia";
        arcadia () { cd ${ARCADIA_ROOT}; };

        cd () {
            if [[ ! -z "${1}" && ! -d "${1}" && -d "${ARCADIA_ROOT}/${1}" ]]; then
                echo "cd $ARCADIA_ROOT/${1}";
                builtin cd $ARCADIA_ROOT/${1};
            else
                builtin cd ${1};
            fi
        }

        export ARCADIA_CONTRIB="${ARCADIA_ROOT}/contrib";
        contrib () { cd ${ARCADIA_CONTRIB}; };

        export TFAPP="${ARCADIA_ROOT}/cv/imgclassifiers/tf_applicator";
        tfapp () { cd ${TFAPP}; };

        export NDL="${ARCADIA_ROOT}/cv/imgclassifiers/framework/nirvana/nirvana_dl";
        ndl() { cd ${NDL}; };

        export PYDL="${ARCADIA_ROOT}/ml/nirvana/python_deep_learning";
        pydl() { cd ${PYDL}; };

        export YTF="${ARCADIA_ROOT}/ml/tensorflow/ytensorflow";
        ytf () { cd ${YTF}; };

        export UB="${ARCADIA_ROOT}/ml/tensorflow/models/userbert";
        ub () { cd ${UB}; };

        export VPQ="${ARCADIA_ROOT}/ml/tensorflow/models/vpq";
        vpq () { cd ${VPQ}; };

        export JUNK="${ARCADIA_ROOT}/junk/splinter";
        junk () { cd ${JUNK}; };

        export DANET="${ARCADIA_ROOT}/cv/imgclassifiers/danet";
        danet () { cd ${DANET}; };

        arcadia_root_call() {
            # $1 -- original cmd
            # $2 -- arcadia cmd
            if [[ $(pwd -P) == ${ARCADIA_ROOT}* ]]; then
                array=( ${(s. .)"${2}"} )
            else
                array=( ${(s. .)"${1}"} )
            fi
            ${array[@]} ${@:3};
        }

        ya () { (unset CC; unset CXX; unset CPATH; ${ARCADIA_ROOT}/ya "$@";) }
        alias gdb='arcadia_root_call gdb "ya tool gdb"';
        alias svn='arcadia_root_call svn "ya tool svn"';

        export ARC_EDITOR=${EDITOR};

        arc() {
            if [[ "${1}" = "rbc" ]]; then
                /usr/bin/arc rebase --continue;
            elif [[ "${1}" = "rbs" ]]; then
                /usr/bin/arc rebase --skip;
            elif [[ "${1}" = "mt" ]]; then
                /usr/bin/arc mergetool -y --tool=vimdiff;
            elif [[ "${1}" = "cb" ]]; then
                echo $(/usr/bin/arc branch | grep '\*' | cut -f2 -d\ );
            elif [[ "${1}" = "s" ]]; then
                /usr/bin/arc status --short ${@:2} \
                    | sed "s/^## \(.*\)\.\.\.\(.*\)/* \1 -> $COLOR_GREEN\2$COLOR_OFF */g" \
                    | sed "s/^\(??.*\)/$COLOR_PURPLE\1$COLOR_OFF/g" \
                    | sed "s/^\( M.*\)/$COLOR_RED\1$COLOR_OFF/g" \
                    | sed "s/^\(A .*\)/$COLOR_GREEN\1$COLOR_OFF/g" \
                    | tac
            elif [[ "${1}" = "undo" ]]; then
                /usr/bin/arc checkout $(arc cb) ${@:2};
            elif [[ "${1}" = "unstage" ]]; then
                /usr/bin/arc reset $(arc cb) ${@:2};
            else
                /usr/bin/arc ${@}
            fi
        }

        ycm () {
            ya make -rj32 \
                --add-protobuf-result \
                --add-result='.h' --add-result='.hh' --add-result='.hpp' \
                --add-result='.c' --add-result='.cc' --add-result='.cpp' \
                --output ${ARCADIA_ROOT}/../generated \
                --no-src-links --keep-going $@;
        }
    fi

    if [ -e "${HOME}/.yt/token" ]; then
        export YT_PROXY=arnold.yt.yandex.net
        export YT_TOKEN=`cat ~/.yt/token`
        export YT_HOME=//home/cvtest/splinter
    fi
}

_update_arcadia_env;

# =====================================================================================================================
# =============================================== OS Specific Settings ================================================
# =====================================================================================================================
if [[ $is_darwin == true ]]; then

elif [[ $is_linux == true ]]; then
    if [[ -L "${HOME}/.zshrc" ]]; then
        if [[ "${#TMUX}" -eq 0 ]]; then
            if [[ -n "$SSH_AUTH_SOCK" && "`readlink ~/.ssh/ssh_auth_sock`" != "$SSH_AUTH_SOCK" ]]; then
                ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
            fi
            tmux attach || tmux new -A
        fi
    fi
else
    echo "${COLOR_RED}Unknown host $(uname -s)${COLOR_OFF}";
fi

# =====================================================================================================================
# ================================================= Deploy Function ===================================================
# =====================================================================================================================

_install_cmake() {
    sudo apt-get install -y libcurl4-openssl-dev;

    mkdir -p ${HOME}/.tmp.build.packages;
    (
        cd ${HOME}/.tmp.build.packages;
        wget http://www.cmake.org/files/v3.10/cmake-3.10.1.tar.gz
        tar -xvzf cmake-3.10.1.tar.gz
        cd cmake-3.10.1/
        ./bootstrap --prefix=${LOCAL}/cmake --system-curl
        make -j
        make install
    )
    rm -rf ${HOME}/.tmp.builld.packages;
    _update_env;
}

_install_tmux() {
    _safe_symlink "${DOTS_HOME}/all/tmux/tmux.conf" "${HOME}/.tmux.conf"
    _safe_symlink "${DOTS_HOME}/all/tmux/tmux-vim-select-pane" "${LOCAL}/bin/tmux-vim-select-pane"

    which tmux > /dev/null;
    if [[ $? -eq 0 ]]; then
        local tmux_version=$(tmux -V | sed 's/tmux //g');
        if [[ ${tmux_version} -eq ${TMUX_VERSION} ]]; then
            return;
        fi
        rm -rf ${LOCAL}/tmux;
    fi

    sudo apt install -y automake
    sudo apt install -y build-essential
    sudo apt install -y pkg-config
    sudo apt install -y libevent-dev
    sudo apt install -y libncurses5-dev

    mkdir -p ${HOME}/.tmp.build.packages;
    (
        cd ${HOME}/.tmp.build.packages;
        git clone https://github.com/tmux/tmux
        cd tmux
        git checkout ${TMUX_VERSION}
        ./autogen.sh
        ./configure --prefix=${LOCAL}/tmux
        make -j
        make install
    )
    rm -rf ${HOME}/.tmp.build.packages

    _update_env;
}

_install_nvim() {
    if [[ $is_darwin == true ]]; then
        brew install neovim;
    elif [[ $is_linux == true ]]; then
        (
            mkdir -p ${LOCAL}/nvim/bin;
            cd ${LOCAL}/nvim/bin;
            curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
            chmod u+x nvim.appimage
            ln -s ${LOCAL}/nvim/bin/nvim.appimage ${LOCAL}/nvim/bin/nvim;
            ln -s ${LOCAL}/nvim/bin/nvim ${LOCAL}/nvim/bin/vim;
        );
    fi
    _update_env;

    mkdir -p "${HOME}/.config/nvim";
    mkdir -p "${HOME}/.config/nvim/syntax";
    mkdir -p "${HOME}/.config/nvim/undo";
    mkdir -p "${HOME}/.config/nvim/swap";
    _safe_symlink "${DOTS_HOME}/all/vim/nvim-init.vim" "${HOME}/.config/nvim/init.vim"
    _safe_symlink "${DOTS_HOME}/all/vim/danet-config.vim" "${HOME}/.config/nvim/syntax/danet-config.vim";
    nvim -e +PluginInstall +qall;
}

_install_ssh() {
    if [[ $is_darwin == true ]]; then
        LAUNCH_AGENTS_DIR="${HOME}/Library/LaunchAgents";

        _launch() {
            launchctl unload "${LAUNCH_AGENTS_DIR}/$1";
            _safe_symlink "${DOTS_HOME}/all/ssh/$1" "${LAUNCH_AGENTS_DIR}/$1";
            launchctl load "${LAUNCH_AGENTS_DIR}/$1";
        }

        _launch pbcopy.plist;
        _launch pbpaste.plist;
        _launch pbopen.plist;
        _launch notebook.plist;
    elif [[ $is_linux == true ]]; then
        _safe_symlink "${DOTS_HOME}/all/ssh/pbcopy-remote.sh" "${LOCAL}/bin/pbcopy";
        _safe_symlink "${DOTS_HOME}/all/ssh/pbpaste-remote.sh" "${LOCAL}/bin/pbpaste";
        _safe_symlink "${DOTS_HOME}/all/ssh/pbopen.sh" "${LOCAL}/bin/pbopen";
    fi
    _safe_symlink "${DOTS_HOME}/all/ssh/notebook.sh" "${LOCAL}/bin/notebook.sh";
    _safe_symlink "${DOTS_HOME}/all/ssh/config" "${HOME}/.ssh/config";
    chmod 400 "${HOME}/.ssh/config";
}


deploy_env() {
    if [[ $is_darwin == true ]]; then
    elif [[ $is_linux == true ]]; then
        sudo apt-get install -y make git cmake libtool-bin;
        sudo apt-get install -y python-pip python-setuptools python3-pip python3-setuptools;
        sudo apt-get install -y software-properties-common python-software-properties;

        _install_cmake;
        _install_tmux;
    fi
    _install_ssh;
    _install_nvim;

    echo "#\!/bin/bash\npython \"\$@\"" > ${LOCAL}/bin/venvpython;
    chmod +x ${LOCAL}/bin/venvpython

    pip3 install -U --user pip setuptools;
    pip3 install -U --user matplotlib;
    pip3 install -U --user pillow;
    pip3 install -U --user 'ipython[all]';
    pip3 install -U --user 'jupyter[all]';
    pip3 install -U --user virtualenvwrapper;
}
