export LC=en_US.UTF-8;
export LC_CTYPE=en_US.UTF-8;
export LC_ALL=en_US.UTF-8;
export LANG=en_US.UTF-8;
export EDITOR='vim';
export HOME=$(cd ${HOME}; pwd -P);
export WORKON_HOME=${HOME}/.virtualenvs;
export PROJECT_HOME=${PROJECTS};
export IPYTHON_PORT=6500;

# Regular Colors
export COLOR_OFF=$'\e[0m'             # Text Reset
export COLOR_BLACK=$'\e[0;30m'        # Black
export COLOR_RED=$'\e[0;31m'          # Red
export COLOR_GREEN=$'\e[0;32m'        # Green
export COLOR_YELLOW=$'\e[0;33m'       # Yellow
export COLOR_BLUE=$'\e[0;34m'         # Blue
export COLOR_PURPLE=$'\e[0;35m'       # Purple
export COLOR_CYAN=$'\e[0;36m'         # Cyan
export COLOR_WHITE=$'\e[0;37m'        # White

alias zshconfig="vim ~/.zshrc"
alias editor="vim"
alias vimlarge="vim -u NONE -U NONE -N"
alias vimconfig="vim ~/.vimrc"
alias ohmyzsh="vim ~/.oh-my-zsh"
alias cx="chmod +x "
alias rm="rm -i"
alias mv="mv -i"
alias wgetn="wget --no-check-certificate";

reset-ssh() {
    sudo netstat -apn | grep -w 2224 | awk '{ print $7 }' | sed 's/\(.*\)\/.*/\1/' | sort -u | xargs -I{} kill -9 {};
}

_pathstr_contains() {
	# check $2 is a subpart of pathes of $1
    splitted=$( echo $1 | tr ":" "\n" );
    echo ${splitted[@]} | grep -q -w -E "^$2$" > /dev/null;
    [[ $? -eq 0 ]] && return 1 || return 0;
}

_smart_append() {
    # join $2 to $1 with ':' if $1 exists, else return $2
    if [[ "$#" -eq 2 ]]; then
        _pathstr_contains $1 $2;
        if [[ $? -eq 0  && -d $2 ]] ; then
            echo "$2:$1";  # $2 is not substring of $1 and exists
        else
            echo "$1";
        fi
    elif [[ "$#" -eq 1 ]]; then
        echo "$1";
    else
        echo "Illegal number of paramters in _smart_append function" 1>&2;
    fi
}

# =====================================================================================================================
# =============================================== Env Creator Settings ================================================
# =====================================================================================================================

_to_clean_env() {
    echo "${COLOR_RED}don't forget call 'tmux detach'${COLOR_OFF}";
    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";
    CPATH="/usr/local/include";
    LIBRARY_PATH="/usr/local/lib";
    LD_LIBRARY_PATH="usr/local/lib";

    export PATH; export CPATH; export LIBRARY_PATH; export LD_LIBRARY_PATH;
}

_update_env() {
    PATH=$(_smart_append ${PATH} "/usr/local/bin");
    PATH=$(_smart_append ${PATH} "/usr/local/opt/coreutils/libexec/gnubin");
    PATH=$(_smart_append ${PATH} "/usr/local/cuda/bin");
    PATH=$(_smart_append ${PATH} "/usr/texbin");
    PATH=$(_smart_append ${PATH} "/place/berkanavt/bin");  # for mr_apps
    PATH=$(_smart_append ${PATH} "${HOME}/.local/bin");  # for virtualenvwrapper and pbcopy/pbpaste
    PATH=$(_smart_append ${PATH} "${HOME}/.linuxbrew/sbin");
    PATH=$(_smart_append ${PATH} "${HOME}/.linuxbrew/bin");

    CPATH=$(_smart_append ${CPATH} "/usr/local/cuda/include");
    CPATH=$(_smart_append ${CPATH} "/usr/local/include");
    CPATH=$(_smart_append ${CPATH} "${HOME}/.local/include")
    CPATH=$(_smart_append ${CPATH} "${HOME}/.linuxbrew/include")

    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "/usr/local/cuda/lib64");
    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "/usr/local/lib");
    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${HOME}/.local/lib");
    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${HOME}/.linuxbrew/lib");

    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "/usr/local/cuda/lib64/stubs");  # libcuda
    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "/usr/local/cuda/lib64");  # libcudart
    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${HOME}/.local/lib");

    MANPATH=$(_smart_append ${MANPATH} "/usr/local/share/man");
    MANPATH=$(_smart_append ${MANPATH} "${HOME}/.local/share/man");
    MANPATH=$(_smart_append ${MANPATH} "${HOME}/.linuxbrew/share/man");

    INFOPATH=$(_smart_append ${INFOPATH} "/usr/local/share/info");
    INFOPATH=$(_smart_append ${INFOPATH} "${HOME}/.local/share/info");
    INFOPATH=$(_smart_append ${INFOPATH} "${HOME}/.linuxbrew/share/info");

    export PATH; export CPATH; export LIBRARY_PATH; export LD_LIBRARY_PATH; export MANPATH; export INFOPATH;

    if [[ -d /usr/local/cuda ]]; then
        export CUDA_HOME="/usr/local/cuda";
    fi

    if [[ -d /opt/openmpi-1.10.2 ]]; then
        export MPI_PATH=/opt/openmpi-1.10.2;
        export CPLUS_INCLUDE_PATH=${MPI_PATH}/include;
        export LIBRARY_PATH=${MPI_PATH}/lib:${LIBRARY_PATH};
        export LD_LIBRARY_PATH=${MPI_PATH}/lib:${LD_LIBRARY_PATH};
    fi

    # contains ruby, required for brew on linux
    if [[ -e ${HOME}/.rvm/scripts/rvm ]]; then
        source ${HOME}/.rvm/scripts/rvm;
    fi

    # it's required by some cmake scripts, which trying to find custom python libs and includes
    export PYTHON_INCLUDE_DIR=$(python-config --prefix)/include/python2.7;
    if [[ `expr substr $(uname -s) 1 5` = "Linux" ]]; then
        export CMAKE_PREFIX=${HOME}/.linuxbrew;
        export PYTHON_LIBRARY=$(python-config --prefix)/lib/libpython2.7.so;
    elif [[ `uname` = "Darwin" ]]; then
        export PYTHON_LIBRARY=$(python-config --prefix)/lib/libpython2.7.dylib;
    fi
}

_update_env;

# =====================================================================================================================
# ================================================= OhMyZsh Settings ==================================================
# =====================================================================================================================

export ZSH=$HOME/.oh-my-zsh

if [[ ! -f ${ZSH}/oh-my-zsh.sh ]]; then
    git clone git://github.com/robbyrussell/oh-my-zsh.git ${ZSH};
fi

if [[ -f "${HOME}/.oh-my-zsh/custom/themes/mytheme.zsh-theme" ]]; then
    ZSH_THEME="mytheme";
else
    ZSH_THEME="maran";
fi

ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
HIST_STAMPS="yyyy-mm-dd"

plugins=(git python osx brew history-substring-search virtualenvwrapper vi-mode)

source $ZSH/oh-my-zsh.sh
bindkey '^R' history-incremental-search-backward

# =====================================================================================================================
# ================================================= Arcadia Settings ==================================================
# =====================================================================================================================

yaclone() {
    svn co svn+ssh://arcadia.yandex.ru/arc/trunk/arcadia/devtools/ya ${HOME}/.yatool;
    [[ ! -z ${1} ]] && local root=${1} || local root="${HOME}/projects/arcadia.git";
    ${HOME}/.yatool/ya clone ${root};
    rm -rf ~/.yatool;
    _update_arcadia_env;
    (
        cd ${root};
        yamake --checkout cv/imgclassifiers -j0;

        git init;
        git add --all :/;
        git commit -m "initial commit";
        python junk/splinter/ycm/ycm_to_color_coded.py > ${root}/.color_coded;
    )
}

_update_arcadia_env () {
    if [ -e "${HOME}/projects/arcadia.git/devtools/ya/ya" ]; then
        export ARCADIA_ROOT="${HOME}/projects/arcadia.git";
        export ARCADIA_ROOT_BIN="${HOME}/projects/arcadia.git/bin";
        export DANET="${ARCADIA_ROOT}/cv/imgclassifiers/danet";
        export DANET_BIN="${ARCADIA_ROOT_BIN}/cv/imgclassifiers/danet";
    fi

    if [[ ! -z "${ARCADIA_ROOT+x}" ]]; then
        arcadia_root_call() {
            # $1 -- original cmd
            # $2 -- arcadia cmd
            if [[ $(pwd -P) == ${ARCADIA_ROOT}* ]]; then
                array=( ${(s. .)"${2}"} )
            else
                array=( ${(s. .)"${1}"} )
            fi
            ${array[@]} ${@:3};
        }

        arcadiavim () {
            # cant run vim in subshell cause of tmux-navigator needs vim cmd, not vim in subshell
            local _CC=${CC}; local _CXX=${CXX}; local _CPATH=${CPATH};
            unset CC; unset CXX; unset CPATH;
            vim "$@";
            export CC=${_CC}; export CXX=${_CXX}; export CPATH=${_CPATH};
        };

        git-svn-update-arcadia-master () {
            if [[ $(pwd -P) != ${ARCADIA_ROOT}* ]]; then
                echo "${COLOR_RED}Error${COLOR_OFF}: Please cd to ${ARCADIA_ROOT} directory." 1>&2;
                return 1;
            fi
            if [[ $(git status --porcelain | wc -c) -ne 0 ]]; then
                echo "${COLOR_RED}Error${COLOR_OFF}: Please commit all local changes and untracked files." 1>&2;
                return 1;
            fi
            local branch=`git branch | grep -e "^*" | cut -f2 -d\ `;
            git co master;
            (cd ${ARCADIA_ROOT}; svn update;)
            git add --all :/;
            git commit -m "update from svn update call";
            git co $branch;
        }

        ya () { (unset CC; unset CXX; unset CPATH; workon system; ${ARCADIA_ROOT}/devtools/ya/ya "$@";) }
        yadev () { (unset CC; unset CXX; unset CPATH; workon system; ${ARCADIA_ROOT}/devtools/ya-dev/ya "$@";) }
        yamake () { ya make -o $ARCADIA_ROOT/bin --no-src-links "$@"; }
        yadevmake () { yadev make -o $ARCADIA_ROOT/bin --no-src-links "$@"; }
        alias gdb='arcadia_root_call gdb "ya tool gdb"';
        alias svn='arcadia_root_call svn "ya tool svn"';
        alias vim='arcadia_root_call vim arcadiavim';

        export OMP_NUM_THREADS=8
        export MKL_NUM_THREADS=8

        alias yaycm='ya make -r --add-result='.h' --add-result='.hh' \
            --add-result='.hpp' --add-result='.c' --add-result='.cc' \
            --add-result='.cpp' --output ${ARCADIA_ROOT}/.ycm \
            --no-src-links --keep-going --checkout'
    fi

    if [ -e "${HOME}/.yt/token" ]; then
        export YT_PROXY=banach.yt.yandex.net
        export YT_TOKEN=`cat ~/.yt/token`
        export YT_HOME=//home/cvtest/splinter
    fi
}

_update_arcadia_env;

# =====================================================================================================================
# =============================================== OS Specific Settings ================================================
# =====================================================================================================================
if [ `uname` = "Darwin" ]; then

elif [ `expr substr $(uname -s) 1 5` = "Linux" ]; then
    if [[ -L "${HOME}/.zshrc" ]]; then
        if [[ -z "$TMUX" ]]; then
            if [[ -n "$SSH_AUTH_SOCK" && "`readlink ~/.ssh/ssh_auth_sock`" != "$SSH_AUTH_SOCK" ]]; then
                ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
            fi
            tmux attach || tmux new -A
        else
            function preexec {
                export $(tmux show-environment | grep "^SSH_AUTH_SOCK")
            }
        fi
    fi
else
    echo "${COLOR_RED}Unknown host $(uname -s)${COLOR_OFF}";
fi

# =====================================================================================================================
# ================================================= Deploy Function ===================================================
# =====================================================================================================================

deploy_env() {
    which brew > /dev/null;
    if [[ $? -ne 0 ]]; then
        if [[ `uname` = "Darwin" ]]; then
            echo "TODO on darwin for deploy brew";
        elif [[ `expr substr $(uname -s) 1 5` = "Linux" ]]; then
            which rvm > /dev/null;
            if [[ $? -ne 0 ]]; then  # install ruby for brew if required
                gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3;
                curl -sSL https://get.rvm.io | bash -s -- --ruby --ignore-dotfiles;
            fi
            git clone https://github.com/Linuxbrew/brew.git ${HOME}/.linuxbrew;
            _update_env; brew doctor; brew update; brew upgrade;
        else
            echo "Unknown system: $(uname)" 1>&2;
            return 1;
        fi
    fi

    brew_install_and_update() {
        brew install $@;
        _update_env;
    }

    brew_install_and_update xz --build-from-source;
    brew_install_and_update openssl --build-from-source;
    brew_install_and_update curl --build-from-source;
    brew_install_and_update gcc;

    brew_install_and_update python --with-unicode-ucs4;
    brew_install_and_update python3;

    which virtualenvwrapper.sh > /dev/null;
    if [[ $? -ne 0 ]]; then
        pip install -U pip setuptools; pip install -U virtualenvwrapper;
        pip3 install -U pip setuptools; pip3 install -U virtualenvwrapper;
    fi
    _update_env;

    brew_install_and_update lua;
    brew_install_and_update https://raw.githubusercontent.com/svetlov/homebrew-core/master/Formula/lua.rb;
    brew switch lua 5.2.4_9999;  # switch to custom lua with fPIC for color_coded vim plugin

    brew_install_and_update ruby;
    brew_install_and_update git --with-brewed-openssl --with-brewed-curl;
    brew_install_and_update cmake;

    brew_install_and_update llvm;

    brew_install_and_update tmux;
    brew_install_and_update ctags;
    brew_install_and_update vim --with-python3 --with-lua --without-ruby --HEAD;

    # install configs
    mkdir -p ${HOME}/projects;
    (
        cd ${HOME}/projects
        if [[ ! -d "${HOME}/projects/dots" ]]; then
            git clone git@github.com:svetlov/dots.git;
            cd dots
        else
            cd dots;
            git stash;
            git checkout master;
            git pull origin master;
        fi
        ./install.py install configs; _update_env;
    );
    mkmathvirtualenv --system-site-packages -p/usr/bin/python2 system;
}

mkmathvirtualenv() {
    mkvirtualenv $@;
    local envname=${@:$#};

    local version=$(python --version 2>&1 | sed 's/Python \([0-9]\.[0-9]\)\.[0-9]*/\1/');
    [[ $version =~ "2." ]] && local pipcmd=pip || local pipcmd=pip3;
    if [[ "$@" =~ "--system-site-packages" ]]; then
        # for custom python system-site-packages point to smth like ~/.linuxbrew/Cellar/python2.7/ ... ,
        # so we need to add real system-site-packages manually
        local pthpath="${HOME}/.virtualenvs/${envname}/lib/python${version}/site-packages/system.pth";
        echo "/usr/lib/python${version}/dist-packages" >> ${pthpath};
        echo "/usr/lib/pymodules/python${version}" >> ${pthpath};
    fi

    $pipcmd install -U setuptools
    $pipcmd install -U pip;
    $pipcmd install -U virtualenvwrapper;
    $pipcmd install -U flake8;
    $pipcmd install -U numpy;
    $pipcmd install -U scipy;
    $pipcmd install -U pandas;
    brew install freetype libpng;
    $pipcmd install -U matplotlib;
    $pipcmd install -U 'ipython[all]';
    deactivate; workon ${@:$#};  # for recheck ipython and others binaries
}
