export LC=en_US.UTF-8;
export LC_CTYPE=en_US.UTF-8;
export LC_ALL=en_US.UTF-8;
export LANG=en_US.UTF-8;
export EDITOR='vim';
export HOME=$(cd ${HOME}; pwd -P);
export LOCAL=${HOME}/.local;
export WORKON_HOME=${HOME}/.virtualenvs;
export PROJECT_HOME=${HOME}/projects;
export IPYTHON_PORT=6500;
export CLANG39_CC="/usr/bin/clang-3.9";
export CLANG39_CXX="/usr/bin/clang++-3.9";

export LUA_VERSION="5.3";
export TMUX_VERSION="2.5";

[[ `uname` == "Linux" ]] && is_linux=true || is_linux=false;
[[ `uname` == "Darwin" ]] && is_darwin=true || is_darwin=false;

# Regular Colors
export COLOR_OFF=$'\e[0m'             # Text Reset
export COLOR_BLACK=$'\e[0;30m'        # Black
export COLOR_RED=$'\e[0;31m'          # Red
export COLOR_GREEN=$'\e[0;32m'        # Green
export COLOR_YELLOW=$'\e[0;33m'       # Yellow
export COLOR_BLUE=$'\e[0;34m'         # Blue
export COLOR_PURPLE=$'\e[0;35m'       # Purple
export COLOR_CYAN=$'\e[0;36m'         # Cyan
export COLOR_WHITE=$'\e[0;37m'        # White

alias zshconfig="vim ~/.zshrc"
alias editor="vim"
alias vimlarge="vim -u NONE -U NONE -N"
alias vimconfig="vim ~/.vimrc"
alias ohmyzsh="vim ~/.oh-my-zsh"
alias cx="chmod +x "
alias rm="rm -i"
alias mv="mv -i"
alias wgetn="wget --no-check-certificate";

reset-ssh() {
    sudo netstat -apn | grep -w 2224 | awk '{ print $7 }' | sed 's/\(.*\)\/.*/\1/' | sort -u | xargs -I{} kill -9 {};
}

lnpwd() {
    if [[ "$#" -ne 2 ]]; then
        echo "${COLOR_RED}Usage: lnpwd from to${COLOR_OFF}" 1>&2;
        return 1;
    fi

    from=$(realpath $1);
    to=$(realpath $2);
    echo "Linking ${from} to ${to}";
    ln -s ${from} ${to};
}

_pathstr_contains() {
	# check $2 is a subpart of pathes of $1
    splitted=$( echo $1 | tr ":" "\n" );
    echo ${splitted[@]} | grep -q -w -E "^$2$" > /dev/null;
    [[ $? -eq 0 ]] && return 1 || return 0;
}

_smart_append() {
    # join $2 to $1 with ':' if $1 exists, else return $2
    if [[ "$#" -eq 2 ]]; then
        _pathstr_contains $1 $2;
        if [[ $? -eq 0  && -d $2 ]] ; then
            echo "$2:$1";  # $2 is not substring of $1 and exists
        else
            echo "$1";
        fi
    elif [[ "$#" -eq 1 ]]; then
        echo "$1";
    else
        echo "Illegal number of paramters in _smart_append function" 1>&2;
    fi
}

# =====================================================================================================================
# =============================================== Env Creator Settings ================================================
# =====================================================================================================================

_to_clean_env() {
    echo "${COLOR_RED}don't forget call 'tmux detach'${COLOR_OFF}";
    PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin";
    CPATH="/usr/local/include";
    LIBRARY_PATH="/usr/local/lib";
    LD_LIBRARY_PATH="/usr/local/lib";

    export PATH; export CPATH; export LIBRARY_PATH; export LD_LIBRARY_PATH;
}

_update_env() {
    PATH=$(_smart_append ${PATH} "/usr/local/bin");
    PATH=$(_smart_append ${PATH} "/usr/local/opt/coreutils/libexec/gnubin");
    PATH=$(_smart_append ${PATH} "/usr/local/cuda/bin");
    PATH=$(_smart_append ${PATH} "/usr/texbin");
    PATH=$(_smart_append ${PATH} "${HOME}/.local/bin");  # for virtualenvwrapper and pbcopy/pbpaste
    PATH=$(_smart_append ${PATH} "${HOME}/.local/tmux/bin");
    PATH=$(_smart_append ${PATH} "${HOME}/.local/vim/bin");

    CPATH=$(_smart_append ${CPATH} "/usr/local/cuda/include");
    CPATH=$(_smart_append ${CPATH} "/usr/local/include");

    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "/usr/local/cuda/lib64");
    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "/usr/local/lib");

    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "/usr/local/cuda/extras/CUPTI/lib64");  # libcupti
    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "/usr/local/cuda/lib64/stubs");  # libcuda
    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "/usr/local/cuda/lib64");  # libcudart
    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "/usr/lib/x86_64-linux-gnu");

    if [[ -d /usr/local/cuda ]]; then
        export CUDA_HOME="/usr/local/cuda";
    fi

    if [[ -d "/opt/openmpi-3.0.0" ]]; then
        export MPI_PATH="/opt/openmpi-3.0.0";
        export CPLUS_INCLUDE_PATH=${MPI_PATH}/include;
        PATH=$(_smart_append ${PATH} "${MPI_PATH}/bin");
        CPATH=$(_smart_append ${CPATH} "${MPI_PATH}/include");
        LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${MPI_PATH}/lib");
        LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${MPI_PATH}/lib");
    fi

    TENSORFLOW_PATH="${HOME}/projects/tensorflow";
    if [[ $is_linux == true && ! -z "${TENSORFLOW_PATH+x}" ]]; then
        export TENSORFLOW_PATH;
        tf () { cd "${TENSORFLOW_PATH}"; };
        # CPATH=$(_smart_append ${CPATH} "${HOME}/projects/tensorflow");
        # CPATH=$(_smart_append ${CPATH} "${HOME}/projects/tensorflow/bazel-genfiles");
        # CPATH=$(_smart_append ${CPATH} "${HOME}/projects/tensorflow/bazel-tensorflow/external");
        # CPATH=$(_smart_append ${CPATH} "${HOME}/projects/tensorflow/bazel-tensorflow/external/protobuf/src");
        # CPATH=$(_smart_append ${CPATH} "${HOME}/projects/tensorflow/bazel-tensorflow/external/eigen_archive");

        # LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${HOME}/projects/tensorflow/bazel-bin/tensorflow");
        # LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${HOME}/projects/tensorflow/bazel-bin/tensorflow");

    fi

    export PATH; export CPATH; export LIBRARY_PATH; export LD_LIBRARY_PATH; export MANPATH; export INFOPATH;
}

_update_env;

# =====================================================================================================================
# ================================================= OhMyZsh Settings ==================================================
# =====================================================================================================================

export ZSH=$HOME/.oh-my-zsh

if [[ ! -f ${ZSH}/oh-my-zsh.sh ]]; then
    git clone git://github.com/robbyrussell/oh-my-zsh.git ${ZSH};
fi

if [[ -f "${HOME}/.oh-my-zsh/custom/themes/mytheme.zsh-theme" ]]; then
    ZSH_THEME="mytheme";
else
    ZSH_THEME="maran";
fi

ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
HIST_STAMPS="yyyy-mm-dd"

plugins=(git mercurial tmux python osx brew history-substring-search virtualenvwrapper vi-mode)

source $ZSH/oh-my-zsh.sh
bindkey '^R' history-incremental-search-backward

# =====================================================================================================================
# ================================================= Arcadia Settings ==================================================
# =====================================================================================================================

yaclone() {
    svn co svn+ssh://arcadia.yandex.ru/arc/trunk/arcadia/devtools/ya ${HOME}/.yatool;
    [[ ! -z ${1} ]] && local root=${1} || local root="${HOME}/projects/arcadia.git";
    ${HOME}/.yatool/ya clone ${root};
    rm -rf ~/.yatool;
    _update_arcadia_env;
    (
        cd ${root};
        yamake --checkout cv/imgclassifiers -j0;

        git init;
        git add --all :/;
        git commit -m "initial commit";
        python junk/splinter/ycm/ycm_to_color_coded.py > ${root}/.color_coded;
    )
}

_update_arcadia_env () {
    if [ -e "${HOME}/projects/arcadia.git/devtools/ya/ya" ]; then
        export ARCADIA_ROOT="${HOME}/projects/arcadia.git";
        export ARCADIA_ROOT_BIN="${ARCADIA_ROOT}/bin";
        arc () { cd ${ARCADIA_ROOT}; };
        export DANET="${ARCADIA_ROOT}/cv/imgclassifiers/danet";
        export DANET_BIN="${ARCADIA_ROOT_BIN}/cv/imgclassifiers/danet";
        danet () { cd ${DANET}; };
        export JUNK="${ARCADIA_ROOT}/junk/splinter";
        export JUNK_BIN="${ARCADIA_ROOT_BIN}/junk/splinter";
        junk () { cd ${JUNK}; };
    fi

    if [[ ! -z "${ARCADIA_ROOT+x}" ]]; then
        arcadia_root_call() {
            # $1 -- original cmd
            # $2 -- arcadia cmd
            if [[ $(pwd -P) == ${ARCADIA_ROOT}* ]]; then
                array=( ${(s. .)"${2}"} )
            else
                array=( ${(s. .)"${1}"} )
            fi
            ${array[@]} ${@:3};
        }

        arcadiavim () {
            # cant run vim in subshell cause of tmux-navigator needs vim cmd, not vim in subshell
            local _CC=${CC}; local _CXX=${CXX};#  local _CPATH=${CPATH};
            unset CC; unset CXX;#  unset CPATH;
            vim "$@";
            export CC=${_CC}; export CXX=${_CXX};#  export CPATH=${_CPATH};
        };

        _git-svn-update-arcadia-master () {
            if [[ $(pwd -P) != ${ARCADIA_ROOT}* ]]; then
                echo "${COLOR_RED}Error${COLOR_OFF}: Please cd to ${ARCADIA_ROOT} directory." 1>&2;
                return 1;
            fi
            if [[ $(git status --porcelain | grep -v "??" | wc -l) -ne 0 ]]; then
                echo "${COLOR_RED}Error${COLOR_OFF}: Please commit all local changes." 1>&2;
                return 1;
            fi
            git staash;
            local branch=`git branch | grep -e "^*" | cut -f2 -d\ `;
            git co master;
            (cd ${ARCADIA_ROOT}; svn update;)
            git add --all :/;
            git commit -m "update from svn update call";
            git co $branch;
            git stash pop;
        }

        ya () { (unset CC; unset CXX; unset CPATH; ${ARCADIA_ROOT}/ya "$@";) }
        yadev () { (unset CC; unset CXX; unset CPATH; ${ARCADIA_ROOT}/devtools/ya-dev/ya "$@";) }
        yamake () { ya make -o $ARCADIA_ROOT/bin --no-src-links "$@"; }
        yadevmake () { yadev make -o $ARCADIA_ROOT/bin --no-src-links "$@"; }
        alias gdb='arcadia_root_call gdb "ya tool gdb"';
        alias svn='arcadia_root_call svn "ya tool svn"';
        alias hg='arcadia_root_call hg "ya tool hg"';
        alias vim='arcadia_root_call vim arcadiavim';

        alias yaycm='ya make -r --add-result='.h' --add-result='.hh' \
            --add-result='.hpp' --add-result='.c' --add-result='.cc' \
            --add-result='.cpp' --output ${ARCADIA_ROOT}/.ycm \
            --no-src-links --keep-going --checkout'
    fi

    if [ -e "${HOME}/.yt/token" ]; then
        export YT_PROXY=hahn.yt.yandex.net
        export YT_TOKEN=`cat ~/.yt/token`
        export YT_HOME=//home/cvtest/splinter
    fi
}

_update_arcadia_env;

# =====================================================================================================================
# =============================================== OS Specific Settings ================================================
# =====================================================================================================================
if [[ $is_darwin == true ]]; then

elif [[ $is_linux == true ]]; then
    if [[ -L "${HOME}/.zshrc" ]]; then
        if [[ -z "$TMUX" ]]; then
            if [[ -n "$SSH_AUTH_SOCK" && "`readlink ~/.ssh/ssh_auth_sock`" != "$SSH_AUTH_SOCK" ]]; then
                ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
            fi
            tmux attach || tmux new -A
        fi
    fi
else
    echo "${COLOR_RED}Unknown host $(uname -s)${COLOR_OFF}";
fi

# =====================================================================================================================
# ================================================= Deploy Function ===================================================
# =====================================================================================================================

_install_gcc49() {
    sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
    sudo apt-get update
    sudo apt-get install -y gcc-4.9 g++-4.9
}
_install_clang39() {
    wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
    sudo apt-get install -y clang-3.9 libclang-3.9-dev lldb-3.9 clang-format-3.9 python-clang-3.9
}

_install_tmux() {
    which tmux > /dev/null;
    if [[ $? -eq 0 ]]; then
        local tmux_version=$(tmux -V | sed 's/tmux //g');
        if [[ ${tmux_version} -eq ${TMUX_VERSION} ]]; then
            return;
        fi
        rm -rf ${LOCAL}/tmux;
    fi

    mkdir -p ${HOME}/.tmp.build.packages;
    (
        cd ${HOME}/.tmp.build.packages;

        sudo apt-get install -y libevent-dev libncurses-dev
        git clone https://github.com/tmux/tmux
        cd tmux
        git checkout ${TMUX_VERSION}
        ./autogen.sh
        ./configure --prefix=${LOCAL}/tmux
        make -j
        make install
    )
    rm -rf ${HOME}/.tmp.build.packages

    _update_env;
}

_install_lua() {
    if [[ -e "${LOCAL}/lua/version" ]]; then
        local lua_version=$(cat "${LOCAL}/lua/version");
        if [[ ${lua_version} -eq ${LUA_VERSION} ]]; then
            return;
        fi
        rm -rf ${LOCAL}/lua;
    fi

    sudo apt-get install -y lua${LUA_VERSION} liblua${LUA_VERSION}-dev
    mkdir -p ${LOCAL}/lua/include
    ln -s /usr/include/lua${LUA_VERSION}/*.h ${LOCAL}/lua/include/
    mkdir -p ${LOCAL}/lua/lib
    ln -s /usr/lib/x86_64-linux-gnu/liblua${LUA_VERSION}.so ${LOCAL}/lua/lib/liblua.so
    echo "${LUA_VERSION}" > ${LOCAL}/lua/version;

    _update_env;
}

_install_last_vim() {
    rm -rf ${LOCAL}/vim
    mkdir -p ${HOME}/.tmp.build.packages;
    (
        cd ${HOME}/.tmp.build.packages;

        sudo apt-get install -y \
            libncurses5-dev \
            libxpm-dev \
            libxt-dev \
            python-dev \
            ruby-dev
        git clone https://github.com/vim/vim.git
        cd vim
        ./configure \
           --prefix=${LOCAL}/vim \
           --with-features=huge \
           --enable-multibyte \
           --enable-rubyinterp=yes \
           --enable-pythoninterp=yes \
           --with-python-config-dir=/usr/lib/python2.7/config \
           --enable-luainterp=yes \
           --with-lua-prefix=${LOCAL}/lua \
           --enable-cscope
        make VIMRUNTIMEDIR=${LOCAL}/vim/share/vim/vim80 -j
        make install
    )
    rm -rf ${HOME}/.tmp.build.packages

    _update_env;
}

_reinstall_dots() {
    mkdir -p ${HOME}/projects;
    (
        cd ${HOME}/projects
        if [[ ! -d "${HOME}/projects/dots" ]]; then
            git clone git@github.com:svetlov/dots.git;
            cd dots
        else
            cd dots;
            git stash;
            git checkout master;
            git pull origin master;
        fi
        ./install.py install configs; _update_env;
    );
}

deploy_env() {
    sudo apt-get install -y make git cmake;
    sudo apt-get install -y software-properties-common python-software-properties;
    _install_gcc49;
    _install_clang39;
    export CC=${CLANG39_CC}; export CXX=${CLANG39_CXX};
    _install_tmux;
    _install_lua;
    _install_last_vim;

    pip2 install -U --user pip setuptools;
    pip2 install -U --user virtualenvwrapper;
    pip2 install -U --user matplotlib;
    pip2 install -U --user pillow;
    pip2 install -U --user 'ipython[all]';
    pip2 install -U --user 'jupyter[all]';

    _reinstall_dots;
    unset CC; unset CXX;
}
