export LC=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export EDITOR='vim'
export HOME=$(cd ${HOME}; pwd -P);
export WORKON_HOME=${HOME}/.virtualenvs
export PROJECT_HOME=${PROJECTS}
export CUDA_HOME="/usr/local/cuda"

# Regular Colors
export COLOR_OFF=$'\e[0m'             # Text Reset
export COLOR_BLACK=$'\e[0;30m'        # Black
export COLOR_RED=$'\e[0;31m'          # Red
export COLOR_GREEN=$'\e[0;32m'        # Green
export COLOR_YELLOW=$'\e[0;33m'       # Yellow
export COLOR_BLUE=$'\e[0;34m'         # Blue
export COLOR_PURPLE=$'\e[0;35m'       # Purple
export COLOR_CYAN=$'\e[0;36m'         # Cyan
export COLOR_WHITE=$'\e[0;37m'        # White

# setopt aliases

alias zshconfig="vim ~/.zshrc"
alias editor="vim"
alias vimlarge="vim -u NONE -U NONE -N"
alias vimconfig="vim ~/.vimrc"
alias ohmyzsh="vim ~/.oh-my-zsh"
alias cx="chmod +x "
alias rm="rm -i"
alias mv="mv -i"
alias wgetn="wget --no-check-certificate";

_str_contains() {
	# check $2 is a substring of $1
	[[ $1 == *$2* ]] && return 1 || return 0;
}

_smart_append() {
    # join $2 to $1 with ':' if $1 exists, else return $2
    # echo "$# $@" 1>&2;
    if [[ "$#" -eq 2 ]]; then
        _str_contains $1 $2;
        if [[ $? -eq 0  && -d $2 ]] ; then
            echo "$2:$1";  # $2 is not substring of $1 and exists
        else
            echo "$1";
        fi
    elif [[ "$#" -eq 1 ]]; then
        echo "$1";
    else
        echo "Illegal number of paramters in _smart_append function" 1>&2;
    fi
}

# =====================================================================================================================
# =============================================== Env Creator Settings ================================================
# =====================================================================================================================

_update_env() {
    PATH=$(_smart_append ${PATH} "/usr/local/bin");
    PATH=$(_smart_append ${PATH} "/usr/local/opt/coreutils/libexec/gnubin");
    PATH=$(_smart_append ${PATH} "/usr/local/cuda/bin");
    PATH=$(_smart_append ${PATH} "/usr/texbin");
    PATH=$(_smart_append ${PATH} "${HOME}/.local/bin");  # for virtualenvwrapper and pbcopy/pbpaste
    PATH=$(_smart_append ${PATH} "${HOME}/.linuxbrew/sbin");
    PATH=$(_smart_append ${PATH} "${HOME}/.linuxbrew/bin");

    CPATH=$(_smart_append ${CPATH} "/usr/local/cuda/include");
    CPATH=$(_smart_append ${CPATH} "/usr/local/include");
    CPATH=$(_smart_append ${CPATH} "${HOME}/.local/include")
    CPATH=$(_smart_append ${CPATH} "${HOME}/.linuxbrew/include")

    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "/usr/local/cuda/lib");
    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "/usr/local/lib");
    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${HOME}/.local/lib");
    LIBRARY_PATH=$(_smart_append ${LIBRARY_PATH} "${HOME}/.linuxbrew/lib");

    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "/usr/local/cuda/lib");
    LD_LIBRARY_PATH=$(_smart_append ${LD_LIBRARY_PATH} "${HOME}/.local/lib");

    MANPATH=$(_smart_append ${MANPATH} "/usr/local/share/man");
    MANPATH=$(_smart_append ${MANPATH} "${HOME}/.local/share/man");
    MANPATH=$(_smart_append ${MANPATH} "${HOME}/.linuxbrew/share/man");

    INFOPATH=$(_smart_append ${INFOPATH} "/usr/local/share/info");
    INFOPATH=$(_smart_append ${INFOPATH} "${HOME}/.local/share/info");
    INFOPATH=$(_smart_append ${INFOPATH} "${HOME}/.linuxbrew/share/info");

    export PATH; export CPATH; export LIBRARY_PATH; export MANPATH; export INFOPATH;

    # contains ruby, required for brew on linux
    if [[ -e ${HOME}/.rvm/scripts/rvm ]]; then
        source ${HOME}/.rvm/scripts/rvm;
    fi
}

_update_env;

# =====================================================================================================================
# ================================================= OhMyZsh Settings ==================================================
# =====================================================================================================================

export ZSH=$HOME/.oh-my-zsh

if [[ ! -f ${ZSH}/oh-my-zsh.sh ]]; then
    git clone git://github.com/robbyrussell/oh-my-zsh.git ${ZSH};
fi

if [[ -f "${HOME}/.oh-my-zsh/custom/themes/mytheme.zsh-theme" ]]; then
    ZSH_THEME="mytheme";
else
    ZSH_THEME="maran";
fi

ENABLE_CORRECTION="false"
COMPLETION_WAITING_DOTS="true"
HIST_STAMPS="yyyy-mm-dd"

plugins=(git python osx brew history-substring-search virtualenvwrapper vi-mode)

source $ZSH/oh-my-zsh.sh
bindkey '^R' history-incremental-search-backward

# =====================================================================================================================
# ================================================= Arcadia Settings ==================================================
# =====================================================================================================================

svnvimdiff () {
    vimdiff ${6} ${7}
}

yaclone() {
    svn co svn+ssh://arcadia.yandex.ru/arc/trunk/arcadia/devtools/ya ${HOME}/.yatool;
    ${HOME}/.yatool/ya clone $@;
    rm -rf ~/.yatool;
    _update_arcadia_env;
}

_update_arcadia_env () {
    if [ -e "${HOME}/projects/arcadia.svn/devtools/ya/ya" ]; then
        export ARCADIA_ROOT="${HOME}/projects/arcadia.svn"
    elif [ -e "${HOME}/projects/arcadia/devtools/ya/ya" ]; then
        export ARCADIA_ROOT="${HOME}/projects/arcadia"
    elif [ -e "${HOME}/projects/yandex/arcadia/devtools/ya/ya" ]; then
        export ARCADIA_ROOT="${HOME}/projects/yandex/arcadia"
    fi

    if [[ ! -z "${ARCADIA_ROOT+x}" ]]; then
        ya () { (unset CC; unset CXX; unset CPATH; ${ARCADIA_ROOT}/devtools/ya/ya "$@";) }
        arcadia_root_call() {
            # $1 -- original cmd
            # $2 -- arcadia cmd
            if [[ $(pwd -P) == ${ARCADIA_ROOT}* ]]; then
                array=( ${(s. .)"${2}"} )
            else
                array=( ${(s. .)"${1}"} )
            fi
            ${array[@]} ${@:3};
        }

        alias gdb='arcadia_root_call gdb "ya tool gdb"';
        arcadiavim () {
            # cant run vim in subshell cause of tmux-navigator needs vim cmd, not vim in subshell
            _CC=${CC}; _CXX=${CXX}; _CPATH=${CPATH};
            unset CC; unset CXX; unset CPATH;
            vim "$@";
            export CC=${_CC}; export CXX=${_CXX}; export CPATH=${_CPATH};
        };
        alias vim='arcadia_root_call vim arcadiavim';

        alias svn='ya tool svn'
        svnst() {
            ya tool svn status "${@}" | \
            grep --line-buffered -E "(?:(?.*/)*| )[^ .]+\..+" |
            sed 's/^\? *\(.*\)/    \?  '"${COLOR_CYAN}"'\1'"${COLOR_OFF}"'/' |
            sed 's/^A *\(.*\)/    A  '"${COLOR_GREEN}"'\1'"${COLOR_OFF}"'/' |
            sed 's/^D *\(.*\)/    D  '"${COLOR_RED}"'\1'"${COLOR_OFF}"'/' |
            sed 's/^M *\(.*\)/    M  '"${COLOR_YELLOW}"'\1'"${COLOR_OFF}"'/'
        }
        svncdiff() { ya tool svn diff "${@}" | colordiff }
        svnvimdiff() { ya tool svn diff "${@}" --diff-cmd=${HOME}/projects/dots/all/vim/svnvimdiffcmd.sh }
        svnunstage() { ya tool svn rm --keep-local "${@}" }

        alias mapreduce="${ARCADIA_ROOT}/quality/mapreduce/mapreduce"

        ## Binaries build with latest GCC require latest libstdc++:
        # yaldpath="$(ya tool c++ --print-toolchain-path)/gcc/lib"
        # export LD_LIBRARY_PATH="${yaldpath}:${LD_LIBRARY_PATH}"
        # for danet
        export OMP_NUM_THREADS=8
        export MKL_NUM_THREADS=8

        alias yaycm='ya make -r --add-result='.h' --add-result='.hh' \
            --add-result='.hpp' --add-result='.c' --add-result='.cc' \
            --add-result='.cpp' --output ${ARCADIA_ROOT}/.ycm \
            --no-src-links --keep-going --checkout'
    fi

    if [ -e "${HOME}/.yt/token" ]; then
        export YT_PROXY=banach.yt.yandex.net
        export YT_TOKEN=`cat ~/.yt/token`
        export YT_HOME=//home/cvtest/splinter
    fi
}

_update_arcadia_env;

# =====================================================================================================================
# =============================================== OS Specific Settings ================================================
# =====================================================================================================================
if [ `uname` = "Darwin" ]; then
    nbtunnel () {
        ssh -q -N -f -L localhost:6500:localhost:7000 $1 \
            && open -a safari https://localhost:6500
    }
    nbstart () {
        if [[ $# == 1 ]]; then
            workon $1 && jupyter notebook
        elif [[ $# == 0 ]]; then
            jupyter notebook
        else;
            echo "Usage: $0 [venv]"
        fi
    }
elif [ `expr substr $(uname -s) 1 5` = "Linux" ]; then
    if [[ -L "${HOME}/.zshrc" ]]; then
        if [[ -z "$TMUX" ]]; then
            if [[ -n "$SSH_AUTH_SOCK" && "`readlink ~/.ssh/ssh_auth_sock`" != "$SSH_AUTH_SOCK" ]]; then
                ln -sf $SSH_AUTH_SOCK ~/.ssh/ssh_auth_sock
            fi
            tmux attach || tmux new -A
        else
            function preexec {
                export $(tmux show-environment | grep "^SSH_AUTH_SOCK")
            }
        fi
    fi

    nbstart () {
        workon $1 && \
            jupyter notebook \
            --certfile=~/projects/dots/all/security/mycert.pem \
            --no-browser --port=7000
    }
else

fi

# =====================================================================================================================
# ================================================= Deploy Function ===================================================
# =====================================================================================================================

deploy_env() {
    which brew > /dev/null;
    if [[ $? -ne 0 ]]; then
        if [[ `uname` = "Darwin" ]]; then
            echo "TODO on darwin for deploy brew";
        elif [[ `expr substr $(uname -s) 1 5` = "Linux" ]]; then
            which rvm > /dev/null;
            if [[ $? -ne 0 ]]; then  # install ruby for brew if required
                gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3;
                curl -sSL https://get.rvm.io | bash -s -- --ruby --ignore-dotfiles;
            fi
            git clone https://github.com/Linuxbrew/linuxbrew.git ${HOME}/.linuxbrew

            _update_env;
            brew doctor;

            wget https://raw.githubusercontent.com/svetlov/dots/master/all/libs/glibc.rb -O .downloaded_glibc.rb;
            mv -f .downloaded_glibc.rb ${HOME}/.linuxbrew/Library/Taps/homebrew/homebrew-core/Formula/glibc.rb;
            brew install glibc;


        else
            echo "Unknown system: $(uname)";
            exit 1;
        fi
        brew install openssl --build-from-source;
        brew install curl --build-from-source;
    fi
    brew install gcc;

    brew install python --with-unicode-ucs4;
    brew install https://raw.github.com/svetlov/dots/master/all/libs/python34.rb;
    brew install https://raw.github.com/svetlov/dots/master/all/libs/lua.rb;

    _update_env;
    export PYTHON_INCLUDE_DIR=$(python-config --prefix)/include/python2.7;
    if [[ `expr substr $(uname -s) 1 5` = "Linux" ]]; then
        export PYTHON_LIBRARY=$(python-config --prefix)/lib/libpython2.7.so;
    elif [[ `uname` = "Darwin" ]]; then
        export PYTHON_LIBRARY=$(python-config --prefix)/lib/libpython2.7.dylib;
    fi

    brew install git --with-brewed-openssl --with-brewed-curl;
    brew install cmake;
    brew install llvm --with-clang --with-clang-extra-tools --with-utils --with-python \
        --with-lld --with-lldb --with-rtti --HEAD;

    brew install tmux;
    brew install ctags;

    brew install vim --with-python3 --with-lua --without-ruby --HEAD;

    which virtualenvwrapper.sh > /dev/null;
    if [[ $? -ne 0 ]]; then
        pip3 install -U virtualenvwrapper;
        _update_env;
    fi

    # install configs
    mkdir -p ${HOME}/projects;
    (
        cd ${HOME}/projects
        if [[ ! -d "${HOME}/projects/dots" ]]; then
            git clone git@github.com:svetlov/dots.git;
            cd dots
        else
            cd dots;
            git stash;
            git checkout master;
            git pull origin master;
        fi
        ./install.py install configs;
    );
    _update_env;
}

mkmathvirtualenv() {
    mkvirtualenv $@;
    local version=$(python --version 2>&1 | sed 's/Python \([0-9]\)\.[0-9]\.[0-9]*/\1/');
    [[ $version = 2 ]] && local pipcmd=pip || local pipcmd=pip3;
    $pipcmd install -U setuptools
    $pipcmd install -U pip;
    $pipcmd install -U numpy;
    $pipcmd install -U scipy;
    $pipcmd install -U pandas;
    brew install freetype libpng;
    $pipcmd install -U matplotlib;
    $pipcmd install -U 'ipython[all]';
    deactivate; workon ${@:$#};
}
